@inject IWeatherForecastService WeatherForecastService
@inject GeolocationService GeolocationService

<div>
    <img class="@GetSearchClass()" src="@GetSearchIcon()" />
    <input class="search" list="locations" @bind="@SearchQuery" @bind:event="oninput" @onchange="LocationSelected" placeholder="City..." autocomplete="off" spellcheck="false" />
    <img class="current-location" src="target.svg" @onclick="GetLocalWeather" />
</div>

<datalist id="locations">
    @foreach (var location in locations.Take(10))
    {
        <option value="@CityState(location)"></option>
    }
</datalist>

@if (noResults)
{
    <p>No results.</p>
}

@code {
    string searchQuery;
    bool isSearching;
    Location[] locations = new Location[0];
    System.Timers.Timer timer;
    bool noResults;

    string SearchQuery
    {
        get => searchQuery;
        set
        {
            searchQuery = value;
            OnInput();
        }
    }

    protected override void OnInitialized()
    {
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += Search;
        timer.AutoReset = false;
    }

    [Parameter]
    public EventCallback<Location> LocationChanged { get; set; }

    async Task GetLocalWeather()
    {
        isSearching = true;
        var geolocation = await GeolocationService.GetLocationAsync();
        var currentLocation = await WeatherForecastService.GetLocationByGeolocation(geolocation.Latitude, geolocation.Longitude);
        isSearching = false;
        await LocationChanged.InvokeAsync(currentLocation);
    }

    void OnInput()
    {
        timer.Stop();
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            isSearching = true;
            timer.Start();
        }
    }

    void Search(Object source, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            if (!string.IsNullOrWhiteSpace(searchQuery))
            {
                locations = await WeatherForecastService.GetLocationsByText(searchQuery);
                isSearching = false;
                noResults = locations.Length == 0;
                StateHasChanged();
            }
        });
    }

    void LocationSelected(ChangeEventArgs e)
    {
        var locationName = (string)e.Value;
        var selectedLocation = locations.FirstOrDefault(l => CityState(l) == locationName);
        if (selectedLocation != null)
        {
            timer.Stop();
            isSearching = false;
            searchQuery = null;
            noResults = false;
            locations = new Location[0];
            LocationChanged.InvokeAsync(selectedLocation);
        }
    }

    string CityState(Location location) => $"{location.LocalizedName}, {location.AdministrativeArea.ID}";

    string GetSearchClass() => isSearching ? "search-icon spinning" : "search-icon";

    string GetSearchIcon() => isSearching ? "loop-circular.svg" : "magnifying-glass.svg";
}

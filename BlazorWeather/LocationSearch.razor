@inject IWeatherForecastService WeatherForecastService

<div>
    <img class="@GetSearchClass()" src="@GetSearchIcon()"/>
    <input class="search" list="locations" value="@searchQuery" @onchange="LocationSelected" @oninput="Search" placeholder="City..." autocomplete="off" spellcheck="false" />
</div>

<datalist id="locations">
    @foreach (var location in locations.Take(10))
    {
        <option value="@CityState(location)"></option>
    }
</datalist>

@if (noResults)
{
    <p>No results.</p>
}

@code {
    string searchQuery;
    Location[] locations = new Location[0];
    CancellationTokenSource tokenSource;
    bool noResults;

    [Parameter]
    public EventCallback<Location> LocationChanged { get; set; }

    async Task Search(ChangeEventArgs e)
    {
        if (IsSearchInProgress())
        {
            CancelSearch();
        }
        noResults = false;
        searchQuery = (string)e.Value;
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            tokenSource = new CancellationTokenSource();
            await Task.Delay(1000, tokenSource.Token); // Only search if not typing for 1sec
            locations = await WeatherForecastService.GetLocationsByText(searchQuery);
            noResults = locations.Length == 0;
            tokenSource.Dispose();
            tokenSource = null;
        }
    }

    bool IsSearchInProgress() => tokenSource != null && !tokenSource.IsCancellationRequested;

    void CancelSearch()
    {
        tokenSource.Cancel();
        tokenSource.Dispose();
    }

    void LocationSelected(ChangeEventArgs e)
    {
        var locationName = (string)e.Value;
        var selectedLocation = locations.FirstOrDefault(l => CityState(l) == locationName);
        if (selectedLocation != null)
        {
            CancelSearch();
            searchQuery = null;
            noResults = false;
            locations = new Location[0];
            LocationChanged.InvokeAsync(selectedLocation);
        }
    }

    string CityState(Location location) => $"{location.LocalizedName}, {location.AdministrativeArea.ID}";

    string GetSearchClass() => IsSearchInProgress() ? "search-icon spinning" : "search-icon";

    string GetSearchIcon() => IsSearchInProgress() ? "loop-circular.svg" : "magnifying-glass.svg";
}

@page "/"
@implements IDisposable
@inject IWeatherForecastService WeatherForecastService
@inject GeolocationService GeolocationService
@inject ILocalStorageService  LocalStorage

@if (currentWeather == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="main" class="@GetBackgroundClass()">
        <div class="weather-now">
            <LocationSearch LocationChanged="LocationChanged" />
            <h1>@currentLocation.LocalizedName.ToUpper()</h1>
            <input type="checkbox" checked="@currentLocation.IsPinned" @onchange="PinLocation" />
            @if (pinnedLocations.Any() && !currentLocation.IsPinned || pinnedLocations.Count() > 1)
            {
                <div class="cycle-pins">
                    <button @onclick="PreviousPinnedLocation">Previous</button>
                    <button @onclick="NextPinnedLocation">Next</button>
                </div>
            }
            <img src="@GetCurrentLocationImage()" />
            <div class="temperature">
                @GetTemperature()
                <TemperatureUnitPicker @bind-TemperatureUnit="temperatureUnit" />
            </div>
            <div class="summary">
                <img class="weather-img" src="@currentWeather.WeatherUri" alt="@currentWeather.WeatherText" />
                @currentWeather.WeatherText
            </div>
            <div class="update-info">Updated @GetTimeToDisplay()</div>
            <div class="metrics">
                <div>UV index <p>@currentWeather.UVIndex</p></div>
                <div>Barometer <p>@currentWeather.Pressure</p></div>
                <div>Humidity <p>@currentWeather.RelativeHumidity%</p></div>
                <div>Wind <p>@currentWeather.WindSpeed <span class="wind-details">mph @currentWeather.WindDirection</span></p></div>
            </div>
        </div>
    </div>
}


@code {
    const string PinnedLocationsKey = "PINNED_LOCATIONS";
    WeatherResponse currentWeather;
    string temperatureUnit = "F";
    Location currentLocation;
    IList<Location> pinnedLocations = new List<Location>();
    int pinnedLocationIndex;

    CancellationTokenSource streamingWeatherCTS = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        currentLocation = (await WeatherForecastService.GetLocationsByText("Seattle")).First();
        currentWeather = await WeatherForecastService.GetWeather(currentLocation.Key);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var geolocation = await GeolocationService.GetLocationAsync();
            currentLocation = await WeatherForecastService.GetLocationByGeolocation(geolocation.Latitude, geolocation.Longitude);
            await LoadPinnedLocations();
            _ = GetWeatherUpdates();
        }
    }

    async Task LoadPinnedLocations()
    {
        if (await LocalStorage.ContainKeyAsync(PinnedLocationsKey))
        {
            pinnedLocations = new List<Location>(await LocalStorage.GetItemAsync<Location[]>(PinnedLocationsKey));
            var currentPinned = pinnedLocations.FirstOrDefault(l => l.Key == currentLocation.Key);
            if (currentPinned != null)
            {
                currentLocation.IsPinned = true;
                pinnedLocations.Remove(currentPinned);
                pinnedLocations.Insert(0, currentLocation);
            }
        }
    }

    async Task StorePinnedLocations()
    {
        await LocalStorage.SetItemAsync(PinnedLocationsKey, pinnedLocations);
    }

    async Task GetWeatherUpdates()
    {
        await foreach (var weatherResponse in WeatherForecastService.GetStreamingWeather(currentLocation.Key, streamingWeatherCTS.Token))
        {
            currentWeather = weatherResponse;
            StateHasChanged();
        }
    }

    void LocationChanged(Location newLocation)
    {

        currentLocation = pinnedLocations.FirstOrDefault(l => l.Key == newLocation.Key) ?? newLocation;
        streamingWeatherCTS.Cancel();
        streamingWeatherCTS.Dispose();
        streamingWeatherCTS = new CancellationTokenSource();
        _ = GetWeatherUpdates();
    }

    async Task PinLocation(ChangeEventArgs e)
    {
        currentLocation.IsPinned = (bool)e.Value;
        if (currentLocation.IsPinned)
        {
            pinnedLocations.Add(currentLocation);
            pinnedLocationIndex = pinnedLocations.Count() - 1;
        }
        else
        {
            pinnedLocations.Remove(currentLocation);
        }
        await StorePinnedLocations();
    }

    void NextPinnedLocation()
    {
        pinnedLocationIndex = (pinnedLocationIndex + 1) % pinnedLocations.Count();
        LocationChanged(pinnedLocations[pinnedLocationIndex]);
    }

    void PreviousPinnedLocation()
    {
        int count = pinnedLocations.Count();
        pinnedLocationIndex = (pinnedLocationIndex + count - 1) % count;
        LocationChanged(pinnedLocations[pinnedLocationIndex]);
    }

    string GetBackgroundClass()
    {
        if (currentWeather == null)
        {
            return string.Empty;
        }
        else if (!currentWeather.IsDayTime)
        {
            return "night";
        }
        else if (currentWeather.Temperature > 60)
        {
            return "warm";
        }
        else
        {
            return "cold";
        }
    }

    void SwitchTemperatureUnit()
    {
        temperatureUnit = temperatureUnit == "F" ? "C" : "F";
    }

    float GetTemperature()
        => temperatureUnit == "F" ? currentWeather.Temperature : TemperatureAsCelsius(currentWeather.Temperature);

    float TemperatureAsCelsius(float f)
        => (float)Math.Round((f - 23f) / 1.8f);

    string GetTimeToDisplay()
        => currentWeather.RetrievedTime.ToLocalTime().ToString("T");

    string GetCurrentLocationImage()
    {
        switch (currentLocation.AdministrativeArea.ID)
        {
            case "WA":
            case "NY":
            case "MO":
            case "IL":
            case "HI":
                return $"{currentLocation.AdministrativeArea.ID}.png";
            default:
                return "wa.png";
        }
    }

    void IDisposable.Dispose()
    {
        streamingWeatherCTS.Cancel();
    }
}
